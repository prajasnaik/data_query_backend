"""Pydantic models for request and response validation"""
from pydantic import BaseModel, Field, ConfigDict
from typing import Dict, List, Optional, Any
from datetime import datetime


class UploadResponse(BaseModel):
    """Response model for CSV upload"""
    success: bool
    message: str
    file_id: str
    filename: str
    row_count: int
    column_count: int
    columns: List[str]
    preview: List[Dict[str, Any]]
    column_types: Dict[str, str]


class SchemaGenerationRequest(BaseModel):
    """Request model for schema generation"""
    file_id: str = Field(..., description="ID of the uploaded CSV file")
    sql_schema: Optional[str] = Field(
        None,
        description="Optional: SQL schema generated by LLM. If not provided, will call LLM service."
    )
    user_instructions: Optional[str] = Field(
        None,
        description="Optional: User instructions for schema generation"
    )


class SchemaGenerationResponse(BaseModel):
    """Response model for schema generation"""
    success: bool
    message: str
    file_id: str
    sql_schema: str = Field(..., description="SQL CREATE TABLE statement")


class DatabaseCreationRequest(BaseModel):
    """Request model for database creation"""
    file_id: str = Field(..., description="ID of the uploaded CSV file")
    sql_schema: str = Field(..., description="SQL CREATE TABLE statement")
    db_name: Optional[str] = Field(None, description="Optional: Custom database name")


class DatabaseCreationResponse(BaseModel):
    """Response model for database creation"""
    success: bool
    message: str
    file_id: str
    database_id: str
    database_path: str
    table_name: str
    row_count: int


class ErrorResponse(BaseModel):
    """Response model for errors"""
    success: bool = False
    error: str
    detail: Optional[str] = None
